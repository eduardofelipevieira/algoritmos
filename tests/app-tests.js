const chai = require('chai')
const expect = chai.expect
const app = require('../src/app')

describe('Problems', function () {
    it('Peak Finding 1D O(lg n)', function () {
        let set = [
            461, 44, 639, 659, 1000, 542, 661, 430, 836, 143, 65,
            66, 236, 41, 42, 473, 663, 747, 869, 805, 845, 530,
            200, 898, 23, 599, 327
        ]

        expect(app.problems.peakFinding(set)).to.match(/^(1000|661|836|236|869|845|898|599)$/)
    })

    it('Count Negative O(n+m)', function () {
        let matrix = [
            [-3, -2, -1, 1],
            [-2, 2, 3, 4],
            [4, 5, 7, 8]
        ]

        expect(app.problems.countNegative(matrix)).to.equal(4)
    })

    it('3n + 1 Problem O(n*m)', function () {
        let i = 1, j = 10, result = 20
        expect(app.problems.problem3NPlus1(i, j)).to.equal(result)

        i = 100, j = 200, result = 125
        expect(app.problems.problem3NPlus1(i, j)).to.equal(result)

        i = 201, j = 210, result = 89
        expect(app.problems.problem3NPlus1(i, j)).to.equal(result)

        i = 900, j = 1000, result = 174
        expect(app.problems.problem3NPlus1(i, j)).to.equal(result)
    })

    it('Minesweeper O(?)', function() {
        const input = 
        `4 4
        *...
        ....
        .*..
        ....
        3 5
        **...
        .....
        .*...
        0 0`

        const result = 
        `*100
        2210
        1*10
        1110`

        expect(app.problems.minesweeper(input)).to.equal(result)
    })
})

describe('Sort', function () {
    it('Insertion Sort O(n^2)', function () {
        let set = [
            461, 44, 639, 659, 1000, 542, 661, 430, 836, 143,
            65, 66, 236, 41, 42, 473, 663, 747, 869, 805,
            845, 530, 200, 898, 23, 599, 327
        ]

        expect(app.sorts.insertionSort(set)).to.deep.equal([23, 41, 42, 44, 65, 66, 143, 200, 236, 327,
            430, 461, 473, 530, 542, 599, 639, 659, 661, 663,
            747, 805, 836, 845, 869, 898, 1000])
    })

    it('Merge Sort O(n lg n)', function () {
        let set = [
            461, 44, 639, 659, 1000, 542, 661, 430, 836, 143,
            65, 66, 236, 41, 42, 473, 663, 747, 869, 805,
            845, 530, 200, 898, 23, 599, 327
        ]

        expect(app.sorts.mergeSort(set)).to.deep.equal([23, 41, 42, 44, 65, 66, 143, 200, 236, 327,
            430, 461, 473, 530, 542, 599, 639, 659, 661, 663,
            747, 805, 836, 845, 869, 898, 1000])
    })

    it('Selection Sort O(n^2)', function () {
        let set = [
            461, 44, 639, 659, 1000, 542, 661, 430, 836, 143,
            65, 66, 236, 41, 42, 473, 663, 747, 869, 805,
            845, 530, 200, 898, 23, 599, 327
        ]

        expect(app.sorts.selectionSort(set)).to.deep.equal([23, 41, 42, 44, 65, 66, 143, 200, 236, 327,
            430, 461, 473, 530, 542, 599, 639, 659, 661, 663,
            747, 805, 836, 845, 869, 898, 1000])
    })

    it('Bucket Sort O(n^2)', function () {
        let set = [
            0.897, 0.565, 0.656, 0.1234, 0.665, 0.3434
        ]

        expect(app.sorts.bucketSort(set, 10)).to.deep.equal([0.1234, 0.3434, 0.565, 0.656, 0.665, 0.897])
    })
})

describe('Search', function () {
    it('Binary Search O(lg n)', function () {
        let list = [23, 41, 42, 44, 65, 66, 143, 200, 236, 327,
            430, 461, 473, 530, 542, 599, 639, 659, 661, 663,
            747, 805, 836, 845, 869, 898, 1000]

        expect(app.searches.binarySearch(845, list)).to.equal(23)

        list = [23, 41, 42, 44, 65, 66, 143, 200, 236, 327,
            430, 461, 473, 530, 542, 599, 639, 659, 661, 663,
            747, 805, 836, 845, 869, 898, 1000]

        expect(app.searches.binarySearch(1001, list)).to.equal(-1)

        list = app.sorts.insertionSort([461, 44, 639, 659, 1000, 542, 661, 430, 836,
            66, 236, 41, 42, 473, 663, 747, 869, 805, 845, 530, 200, 898, 23,
            599, 327, 12, 234, 748, 778, 389, 207, 192, 515, 400, 509, 640, 39,
            469, 731, 287, 814, 444, 608, 271, 769, 688, 329, 916, 505, 905,
            775, 888, 675, 336, 638, 338, 11, 843, 874, 718, 164, 228, 8, 882,
            789, 361, 73, 458, 654, 397, 411, 462, 855, 652, 904, 687, 744, 517,
            259, 33, 833, 812, 189, 54, 480, 97, 682, 924, 301, 235, 90, 195, 676,
            429, 295, 630, 757, 403, 375, 106])

        expect(app.searches.binarySearch(8, list)).to.equal(0)
    })

    it('Linear Search O(n)', function () {
        let list = [461, 44, 639, 659, 1000, 542, 661, 430, 836,
            66, 236, 41, 42, 473, 663, 747, 869, 805, 845, 530, 200, 898, 23,
            599, 327, 12, 234, 748, 778, 389, 207, 192, 515, 400, 509, 640, 39,
            469, 731, 287, 814, 444, 608, 271, 769, 688, 329, 916, 505, 905,
            775, 888, 675, 336, 638, 338, 11, 843, 874, 718, 164, 228, 8, 882,
            789, 361, 73, 458, 654, 397, 411, 462, 855, 652, 904, 687, 744, 517,
            259, 33, 833, 812, 189, 54, 480, 97, 682, 924, 301, 235, 90, 195, 676,
            429, 295, 630, 757, 403, 375, 106]

        expect(app.searches.linearSearch(845, list)).to.equal(18)

        list = [461, 44, 639, 659, 1000, 542, 661, 430, 836,
            66, 236, 41, 42, 473, 663, 747, 869, 805, 845, 530, 200, 898, 23,
            599, 327, 12, 234, 748, 778, 389, 207, 192, 515, 400, 509, 640, 39,
            469, 731, 287, 814, 444, 608, 271, 769, 688, 329, 916, 505, 905,
            775, 888, 675, 336, 638, 338, 11, 843, 874, 718, 164, 228, 8, 882,
            789, 361, 73, 458, 654, 397, 411, 462, 855, 652, 904, 687, 744, 517,
            259, 33, 833, 812, 189, 54, 480, 97, 682, 924, 301, 235, 90, 195, 676,
            429, 295, 630, 757, 403, 375, 106]

        expect(app.searches.linearSearch(1001, list)).to.equal(-1)

        list = [461, 44, 639, 659, 1000, 542, 661, 430, 836,
            66, 236, 41, 42, 473, 663, 747, 869, 805, 845, 530, 200, 898, 23,
            599, 327, 12, 234, 748, 778, 389, 207, 192, 515, 400, 509, 640, 39,
            469, 731, 287, 814, 444, 608, 271, 769, 688, 329, 916, 505, 905,
            775, 888, 675, 336, 638, 338, 11, 843, 874, 718, 164, 228, 8, 882,
            789, 361, 73, 458, 654, 397, 411, 462, 855, 652, 904, 687, 744, 517,
            259, 33, 833, 812, 189, 54, 480, 97, 682, 924, 301, 235, 90, 195, 676,
            429, 295, 630, 757, 403, 375, 106]

        expect(app.searches.linearSearch(461, list)).to.equal(0)
    })
})